package shadersmod.client;

/* loaded from: ShadersMod-v2.7.1mc1.12-dev.jar:shadersmod/client/SBakedQuad.class */
public class SBakedQuad {
    static final int vertexSize = 14;
    static final int offsetPos = 0;
    static final int offsetUV = 4;
    static final int offsetNormal = 7;
    static final int offsetMidUV = 8;
    static final int offsetTangent = 10;
    static final int offsetEntity = 12;

    public static int[] onMakeQuadData(int[] vertexData) {
        float v0x = Float.intBitsToFloat(vertexData[0]);
        float v0y = Float.intBitsToFloat(vertexData[1]);
        float v0z = Float.intBitsToFloat(vertexData[2]);
        float v0u = Float.intBitsToFloat(vertexData[4]);
        float v0v = Float.intBitsToFloat(vertexData[5]);
        float v1x = Float.intBitsToFloat(vertexData[14]);
        float v1y = Float.intBitsToFloat(vertexData[15]);
        float v1z = Float.intBitsToFloat(vertexData[16]);
        float v1u = Float.intBitsToFloat(vertexData[18]);
        float v1v = Float.intBitsToFloat(vertexData[19]);
        float v2x = Float.intBitsToFloat(vertexData[28]);
        float v2y = Float.intBitsToFloat(vertexData[29]);
        float v2z = Float.intBitsToFloat(vertexData[30]);
        float v2u = Float.intBitsToFloat(vertexData[32]);
        float v2v = Float.intBitsToFloat(vertexData[33]);
        float v3x = Float.intBitsToFloat(vertexData[42]);
        float v3y = Float.intBitsToFloat(vertexData[43]);
        float v3z = Float.intBitsToFloat(vertexData[44]);
        float v3u = Float.intBitsToFloat(vertexData[46]);
        float v3v = Float.intBitsToFloat(vertexData[47]);
        float x1 = v2x - v0x;
        float y1 = v2y - v0y;
        float z1 = v2z - v0z;
        float x2 = v3x - v1x;
        float y2 = v3y - v1y;
        float z2 = v3z - v1z;
        float vnx = (y1 * z2) - (y2 * z1);
        float vny = (z1 * x2) - (z2 * x1);
        float vnz = (x1 * y2) - (x2 * y1);
        float lensq = (vnx * vnx) + (vny * vny) + (vnz * vnz);
        float mult = ((double) lensq) != 0.0d ? (float) (1.0d / Math.sqrt(lensq)) : 1.0f;
        float vnx2 = vnx * mult;
        float vny2 = vny * mult;
        float vnz2 = vnz * mult;
        float x12 = v1x - v0x;
        float y12 = v1y - v0y;
        float z12 = v1z - v0z;
        float u1 = v1u - v0u;
        float v1 = v1v - v0v;
        float x22 = v2x - v0x;
        float y22 = v2y - v0y;
        float z22 = v2z - v0z;
        float u2 = v2u - v0u;
        float v2 = v2v - v0v;
        float d = (u1 * v2) - (u2 * v1);
        float r = d != 0.0f ? 1.0f / d : 1.0f;
        float tan1x = ((v2 * x12) - (v1 * x22)) * r;
        float tan1y = ((v2 * y12) - (v1 * y22)) * r;
        float tan1z = ((v2 * z12) - (v1 * z22)) * r;
        float tan2x = ((u1 * x22) - (u2 * x12)) * r;
        float tan2y = ((u1 * y22) - (u2 * y12)) * r;
        float tan2z = ((u1 * z22) - (u2 * z12)) * r;
        float lensq2 = (tan1x * tan1x) + (tan1y * tan1y) + (tan1z * tan1z);
        float mult2 = ((double) lensq2) != 0.0d ? (float) (1.0d / Math.sqrt(lensq2)) : 1.0f;
        float tan1x2 = tan1x * mult2;
        float tan1y2 = tan1y * mult2;
        float tan1z2 = tan1z * mult2;
        float lensq3 = (tan2x * tan2x) + (tan2y * tan2y) + (tan2z * tan2z);
        float mult3 = ((double) lensq3) != 0.0d ? (float) (1.0d / Math.sqrt(lensq3)) : 1.0f;
        float tan2x2 = tan2x * mult3;
        float tan2y2 = tan2y * mult3;
        float tan2z2 = tan2z * mult3;
        float tan3x = (vnz2 * tan1y2) - (vny2 * tan1z2);
        float tan3y = (vnx2 * tan1z2) - (vnz2 * tan1x2);
        float tan3z = (vny2 * tan1x2) - (vnx2 * tan1y2);
        float tan1w = ((tan2x2 * tan3x) + (tan2y2 * tan3y)) + (tan2z2 * tan3z) < 0.0f ? -1.0f : 1.0f;
        int bnx = ((int) (vnx2 * 127.0f)) & 255;
        int bny = ((int) (vny2 * 127.0f)) & 255;
        int bnz = ((int) (vnz2 * 127.0f)) & 255;
        int packedNormal = (bnz << 16) + (bny << 8) + bnx;
        vertexData[7] = packedNormal;
        vertexData[21] = packedNormal;
        vertexData[35] = packedNormal;
        vertexData[49] = packedNormal;
        int packedTan1xy = (((int) (tan1x2 * 32767.0f)) & 65535) + ((((int) (tan1y2 * 32767.0f)) & 65535) << 16);
        int packedTan1zw = (((int) (tan1z2 * 32767.0f)) & 65535) + ((((int) (tan1w * 32767.0f)) & 65535) << 16);
        vertexData[10] = packedTan1xy;
        vertexData[11] = packedTan1zw;
        vertexData[24] = packedTan1xy;
        vertexData[25] = packedTan1zw;
        vertexData[38] = packedTan1xy;
        vertexData[39] = packedTan1zw;
        vertexData[52] = packedTan1xy;
        vertexData[53] = packedTan1zw;
        float midU = (((v0u + v1u) + v2u) + v3u) / 4.0f;
        float midV = (((v0v + v1v) + v2v) + v3v) / 4.0f;
        vertexData[8] = Float.floatToRawIntBits(midU);
        vertexData[9] = Float.floatToRawIntBits(midV);
        vertexData[22] = Float.floatToRawIntBits(midU);
        vertexData[23] = Float.floatToRawIntBits(midV);
        vertexData[36] = Float.floatToRawIntBits(midU);
        vertexData[37] = Float.floatToRawIntBits(midV);
        vertexData[50] = Float.floatToRawIntBits(midU);
        vertexData[51] = Float.floatToRawIntBits(midV);
        return vertexData;
    }

    public static void onRemapQuad(int[] vertexData) {
        float v0u = Float.intBitsToFloat(vertexData[4]);
        float v0v = Float.intBitsToFloat(vertexData[5]);
        float v1u = Float.intBitsToFloat(vertexData[18]);
        float v1v = Float.intBitsToFloat(vertexData[19]);
        float v2u = Float.intBitsToFloat(vertexData[32]);
        float v2v = Float.intBitsToFloat(vertexData[33]);
        float v3u = Float.intBitsToFloat(vertexData[46]);
        float v3v = Float.intBitsToFloat(vertexData[47]);
        float midU = (((v0u + v1u) + v2u) + v3u) / 4.0f;
        float midV = (((v0v + v1v) + v2v) + v3v) / 4.0f;
        vertexData[8] = Float.floatToRawIntBits(midU);
        vertexData[9] = Float.floatToRawIntBits(midV);
        vertexData[22] = Float.floatToRawIntBits(midU);
        vertexData[23] = Float.floatToRawIntBits(midV);
        vertexData[36] = Float.floatToRawIntBits(midU);
        vertexData[37] = Float.floatToRawIntBits(midV);
        vertexData[50] = Float.floatToRawIntBits(midU);
        vertexData[51] = Float.floatToRawIntBits(midV);
    }
}
